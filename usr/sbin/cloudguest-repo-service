#!/usr/bin/python3

# Copyright (c) 2019, SUSE LLC, All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library.

"""This script provides the repositories for on-demand instances."""

import base64
import glob
import json
import logging
import os
import platform
import requests
import sys

from requests.auth import HTTPBasicAuth
from lxml import etree

import cloudregister.registerutils as utils

def print_repo_data(update_server, activation):
    """Print repository data from product activation info."""
    service_info = activation.get('service')
    service_name = service_info.get('name')
    product_info = service_info.get('product')
    product_name = product_info.get('name')
    product_version = product_info.get('version')
    arch = platform.machine()
    base_product_name = product_name.replace(
        product_version, '').replace(arch, '').strip().replace(' ', '_')
    
    credentials_file = os.path.basename(
        utils.get_credentials_file(
            update_server,
            base_product_name
        )
    )
    for repo in product_info.get('repositories'):
        name = repo.get('name')
        refresh = repo.get('autorefresh')
        enabled = repo.get('enabled')
        url = repo.get('url')
        if url.startswith('plugin:'):
            is_plugin_url = True
            base_url = url
        elif url.startswith('http'):
            relative_path = url.split('repo')[-1]
            base_url = 'plugin:susecloud?'
            if credentials_file:
                base_url += 'credentials=%s&' % credentials_file
            base_url += 'path=/repo%s' % relative_path
        print('[%s]' % name)
        print('name=%s' % name)
        print('enabled=%d' % int(enabled == True))
        print('autorefresh=%s' % int(refresh == True))
        print('baseurl=%s' % base_url)


utils.start_logging()
utils.set_proxy()

# Make sure we are pointing to a reachable server
update_server = utils.get_smt()
if not update_server:
    logging.info('[Repo-Service] No update server found cannot provide repos')
    sys.exit(1)

user, password = utils.get_credentials(
    utils.get_credentials_file(update_server)
)
if not user and password:
    logging.error('[Repo-Service] Unable to extract username and password '
                  'for "%s"' % update_server.get_FQDN()
    )
    sys.exit(1)

auth_creds = HTTPBasicAuth(user, password)

instance_data = bytes(utils.get_instance_data(utils.get_config()), 'utf-8')
headers = {}
if instance_data:
    headers['X-Instance-Data'] = base64.b64encode(instance_data)

req = requests.get(
    'https://%s/connect/systems/activations' % update_server.get_FQDN(),
    auth=auth_creds,
    headers=headers
)

if req.status_code != 200:
    srv_ipv4 = update_server.get_ipv4()
    srv_ipv6 = update_server.get_ipv6()
    logging.error('[Repo-Service] Unable to get product info from '
                  'update server: "%s"' % str((srv_ipv4, srv_ipv6))
    )
    logging.error('\tReason: "%s"' % req.reason)
    logging.error('\tCode: %d', req.status_code)
    sys.exit(1)

product_activations = json.loads(req.text)
for activation in product_activations:
    print_repo_data(update_server, activation)

#if has_plugin_format:
#    # FIXME Re-add the .service file
#    # Remove my link
#    pass



