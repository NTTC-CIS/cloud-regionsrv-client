#!/usr/bin/python3

# Copyright (c) 2019, SUSE LLC, All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library.

"""This script provides the repositories for on-demand instances."""

import logging
import os
import platform
import sys

import cloudregister.registerutils as utils

def print_repo_data(update_server, activation):
    """Print repository data from product activation info."""
    service_info = activation.get('service')
    service_name = service_info.get('name')
    product_info = service_info.get('product')
    product_name = product_info.get('name')
    product_version = product_info.get('version')
    arch = platform.machine()
    base_product_name = product_name.replace(
        product_version, '').replace(arch, '').strip().replace(' ', '_')
    
    credentials_file = os.path.basename(
        utils.get_credentials_file(
            update_server,
            base_product_name
        )
    )
    is_plugin_url = False
    service_revert_file = utils.REGISTRATION_DATA_DIR + 'installservice'
    for repo in product_info.get('repositories'):
        name = repo.get('name')
        refresh = repo.get('autorefresh')
        enabled = repo.get('enabled')
        url = repo.get('url')
        if url.startswith('plugin:'):
            is_plugin_url = True
            with open(service_revert_file, 'a') as trigger:
                trigger.write("%s\n" % service_name)
            base_url = url
        elif url.startswith('http'):
            relative_path = url.split('repo')[-1]
            base_url = 'plugin:susecloud?'
            if credentials_file:
                base_url += 'credentials=%s&' % credentials_file
            base_url += 'path=/repo%s' % relative_path
        print('[%s]' % name)
        print('name=%s' % name)
        print('enabled=%d' % int(enabled == True))
        print('autorefresh=%s' % int(refresh == True))
        print('baseurl=%s' % base_url)

    return is_plugin_url


utils.start_logging()
utils.set_proxy()

# Make sure we are pointing to a reachable server
update_server = utils.get_smt()
if not update_server:
    logging.info('[Repo-Service] No update server found cannot provide repos')
    sys.exit(1)

product_activations = utils.get_activations()
if not product_activations:
    logging.error('[Repo-Service] Unable to retrieve product activations '
                  'from "%s"' % update_server.get_FQDN()
    )
    sys.exit(1)

trigger_set = False
for activation in product_activations:
    has_plugin_format = print_repo_data(update_server, activation)
    if has_plugin_format and not trigger_set:
        trigger_set = True
        os.spawnl(os.P_DETACH, '/usr/sbin/switchcloudguestservices')
